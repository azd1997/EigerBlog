<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algo on Eiger - A young gopher</title>
    <link>https://azd1997.github.io/categories/algo/</link>
    <description>Recent content in algo on Eiger - A young gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 30 Oct 2019 07:06:46 +0800</lastBuildDate>
    
	<atom:link href="https://azd1997.github.io/categories/algo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>字符串匹配算法</title>
      <link>https://azd1997.github.io/post/algo/dsa33/</link>
      <pubDate>Wed, 30 Oct 2019 07:06:46 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa33/</guid>
      <description>0. 导言 1. BF算法 2. RK算法 3. BM算法 3.1 核心思想 3.2 原理 3.2.1 坏字符规则 3.2.2 好后缀规则 3.2 go语言实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
    </item>
    
    <item>
      <title>数据结构与算法（3）——链表</title>
      <link>https://azd1997.github.io/post/algo/dsa03/</link>
      <pubDate>Fri, 18 Oct 2019 03:22:06 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa03/</guid>
      <description>1. 导语 链表的一个经典应用场景是LRU缓存淘汰算法 缓存提高数据读取性能，应用广泛，常见的有CPU缓存、数据库缓存、浏览器缓存。 缓存大小有限，当</description>
    </item>
    
    <item>
      <title>数据结构与算法（2）——数组</title>
      <link>https://azd1997.github.io/post/algo/dsa02/</link>
      <pubDate>Thu, 26 Sep 2019 22:05:29 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa02/</guid>
      <description>1. 导语 为什么数组下表从0开始而非1开始？ 2. 如何实现随机访问 数组(array) 是一种线性表数据结构，用一组连续的内存空间，存储一组相同类型的数</description>
    </item>
    
    <item>
      <title>寻找最长不重复子字符串</title>
      <link>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</guid>
      <description>求取字符串中最长的含有不重复字符的子字符串的长度。 1 开始之前 先了解下Go语言字符串的处理机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func compareBytesStringRune(s string)</description>
    </item>
    
  </channel>
</rss>