<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algo on Eiger - A young gopher</title>
    <link>https://azd1997.github.io/categories/algo/</link>
    <description>Recent content in algo on Eiger - A young gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 Nov 2019 22:11:41 +0800</lastBuildDate>
    
	<atom:link href="https://azd1997.github.io/categories/algo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode42——接雨水</title>
      <link>https://azd1997.github.io/post/algo/lt42/</link>
      <pubDate>Sun, 10 Nov 2019 22:11:41 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt42/</guid>
      <description>题意 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下</description>
    </item>
    
    <item>
      <title>Leetcode70——爬楼梯</title>
      <link>https://azd1997.github.io/post/algo/lt70/</link>
      <pubDate>Sat, 09 Nov 2019 22:47:11 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt70/</guid>
      <description>题意 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。 示例 1</description>
    </item>
    
    <item>
      <title>Leetcode11——盛最多水的容器</title>
      <link>https://azd1997.github.io/post/algo/lt11/</link>
      <pubDate>Sat, 09 Nov 2019 20:54:15 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt11/</guid>
      <description>题意 给定 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i,</description>
    </item>
    
    <item>
      <title>Leetcode283——移动零</title>
      <link>https://azd1997.github.io/post/algo/lt283/</link>
      <pubDate>Sat, 09 Nov 2019 09:08:07 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt283/</guid>
      <description>题意 移动0 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 1 2 输入: [0,1,0,3,12] 输出: [1,3,12,0,0] 说明: 必须在原数</description>
    </item>
    
    <item>
      <title>Leetcode146——LRU缓存机制</title>
      <link>https://azd1997.github.io/post/algo/lt146/</link>
      <pubDate>Sat, 09 Nov 2019 07:30:55 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt146/</guid>
      <description>题意 运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。 获取数据 get(key) - 如果密钥 (key) 存在</description>
    </item>
    
    <item>
      <title>Leetcode641——设计循环双端队列</title>
      <link>https://azd1997.github.io/post/algo/lt641/</link>
      <pubDate>Sat, 09 Nov 2019 01:43:22 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt641/</guid>
      <description>题意 设计实现双端队列。 你的实现需要支持以下操作： 1 2 3 4 5 6 7 8 9 MyCircularDeque(k)：构造函数,双端队列的大小为k。 ins</description>
    </item>
    
    <item>
      <title>Leetcode21——合并两个有序链表</title>
      <link>https://azd1997.github.io/post/algo/lt21/</link>
      <pubDate>Fri, 08 Nov 2019 08:33:08 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt21/</guid>
      <description>解法二超越100%golang提交 题意 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例： 1 2</description>
    </item>
    
    <item>
      <title>Leetcode88——合并两个有序数组</title>
      <link>https://azd1997.github.io/post/algo/lt88/</link>
      <pubDate>Fri, 08 Nov 2019 01:59:13 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt88/</guid>
      <description>题意 给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。 说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。 你可以假设 nums1 有足够</description>
    </item>
    
    <item>
      <title>Leetcode189——旋转数组</title>
      <link>https://azd1997.github.io/post/algo/lt189/</link>
      <pubDate>Wed, 06 Nov 2019 22:36:36 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt189/</guid>
      <description>1. 题意 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例 1: 1 2 3 4 5 6 输入: [1,2,3,4,5,6,7] 和 k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右旋转 1 步: [7,1,2,3,4,5,6] 向右旋转</description>
    </item>
    
    <item>
      <title>Leetcode26——删除排序数组的重复项</title>
      <link>https://azd1997.github.io/post/algo/lt26/</link>
      <pubDate>Wed, 06 Nov 2019 05:20:19 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt26/</guid>
      <description>1. 题意 难度： easy 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必</description>
    </item>
    
    <item>
      <title>覃超数据结构与算法7天训练营笔记</title>
      <link>https://azd1997.github.io/post/algo/training-classroom/</link>
      <pubDate>Mon, 04 Nov 2019 20:39:10 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/training-classroom/</guid>
      <description>0. 前言 0.1 学习目标 对于算法和数据结构理解达到职业顶尖级别 一线互联网公司面试 Leetcode 300+ 积累 0.2 学习方法 参考书籍：《异类：不一样的成功启示录》 三步走： chunk it</description>
    </item>
    
    <item>
      <title>字符串匹配算法</title>
      <link>https://azd1997.github.io/post/algo/dsa33/</link>
      <pubDate>Wed, 30 Oct 2019 07:06:46 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa33/</guid>
      <description>0. 导言 1. BF算法 2. RK算法 3. BM算法 3.1 核心思想 3.2 原理 3.2.1 坏字符规则 3.2.2 好后缀规则 3.2 go语言实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
    </item>
    
    <item>
      <title>数据结构与算法（3）——链表</title>
      <link>https://azd1997.github.io/post/algo/dsa03/</link>
      <pubDate>Fri, 18 Oct 2019 03:22:06 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa03/</guid>
      <description>1. 导语 链表的一个经典应用场景是LRU缓存淘汰算法 缓存提高数据读取性能，应用广泛，常见的有CPU缓存、数据库缓存、浏览器缓存。 缓存大小有限，当</description>
    </item>
    
    <item>
      <title>数据结构与算法（2）——数组</title>
      <link>https://azd1997.github.io/post/algo/dsa02/</link>
      <pubDate>Thu, 26 Sep 2019 22:05:29 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa02/</guid>
      <description>1. 导语 为什么数组下表从0开始而非1开始？ 2. 如何实现随机访问 数组(array) 是一种线性表数据结构，用一组连续的内存空间，存储一组相同类型的数</description>
    </item>
    
    <item>
      <title>寻找最长不重复子字符串</title>
      <link>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</guid>
      <description>求取字符串中最长的含有不重复字符的子字符串的长度。 1 开始之前 先了解下Go语言字符串的处理机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func compareBytesStringRune(s string)</description>
    </item>
    
  </channel>
</rss>