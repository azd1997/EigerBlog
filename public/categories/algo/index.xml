<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algo on Eiger - A young gopher</title>
    <link>https://azd1997.github.io/categories/algo/</link>
    <description>Recent content in algo on Eiger - A young gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Mar 2020 11:55:30 +0800</lastBuildDate>
    
	<atom:link href="https://azd1997.github.io/categories/algo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>贪心算法</title>
      <link>https://azd1997.github.io/post/algo/greedy-algo/</link>
      <pubDate>Thu, 19 Mar 2020 11:55:30 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/greedy-algo/</guid>
      <description>0. 导语 1. 介绍 2. 例题 2.1 最长回文串 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // 给定一个包含大写字母</description>
    </item>
    
    <item>
      <title>图论基础</title>
      <link>https://azd1997.github.io/post/algo/graph/</link>
      <pubDate>Tue, 17 Mar 2020 23:38:43 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/graph/</guid>
      <description>0. 导语 图能表示： 交通运输、社交网络、互联网、工作安排、脑区活动、程序状态执行 分类： 有向图/无向图 有权图/无权图 有环/无环 图的连通性 简单图：只</description>
    </item>
    
    <item>
      <title>形形色色的树——并查集</title>
      <link>https://azd1997.github.io/post/algo/tree-union-find/</link>
      <pubDate>Tue, 17 Mar 2020 21:24:52 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/tree-union-find/</guid>
      <description>0. 导论 并查集可以非常高效的解决连接问题 网络中节点间的连接状态 网络是个抽象的概念： 用户之间形成的网络 数据库中音乐、电影、书籍之间的网络 铁路交通</description>
    </item>
    
    <item>
      <title>二分查找问题集锦</title>
      <link>https://azd1997.github.io/post/algo/binary-search-problems/</link>
      <pubDate>Sat, 14 Mar 2020 12:34:24 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/binary-search-problems/</guid>
      <description>0. 导语 强烈推荐labuladong的二分查找模板！！！ 1. 模板一 模板 #1 用于查找可以通过访问数组中的单个索引来确定的元素或条件。 关键属性 二分查找</description>
    </item>
    
    <item>
      <title>回溯算法</title>
      <link>https://azd1997.github.io/post/algo/algo-backtrack/</link>
      <pubDate>Fri, 13 Mar 2020 19:28:20 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/algo-backtrack/</guid>
      <description>0. 导语 1. 回溯思想及应用 2. 回溯框架 解决一个回溯问题的过程其实是在遍历一颗决策树。 主要思考三个问题： 路径：也就是已经做出的选择。 选择列表：也就是</description>
    </item>
    
    <item>
      <title>位操作问题集锦</title>
      <link>https://azd1997.github.io/post/algo/bit-operation/</link>
      <pubDate>Fri, 13 Mar 2020 19:12:20 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/bit-operation/</guid>
      <description>0. 导语 1. 常用位操作 1.1 基础位操作 按位或 x | y 按位与 x &amp;amp; y 按位取反 ^x 左移n位 x &amp;lt;&amp;lt; n 右移n位 x &amp;gt;&amp;gt; n 1.2 高级位运算 x &amp;amp; -x 可以将x最后一个1保留，其他全</description>
    </item>
    
    <item>
      <title>图搜索算法——DFS与BFS</title>
      <link>https://azd1997.github.io/post/algo/search-in-graph/</link>
      <pubDate>Fri, 13 Mar 2020 09:12:20 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/search-in-graph/</guid>
      <description>0. 导语 虽然这里讲图搜索算法，但其实DFS/BFS也可以应用与树的搜索，只是树搜索那一篇讲二叉搜索树已经很长了，因此，这两个最常见的搜索算法放</description>
    </item>
    
    <item>
      <title>编程中的数学操作</title>
      <link>https://azd1997.github.io/post/algo/math/</link>
      <pubDate>Thu, 12 Mar 2020 11:39:11 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/math/</guid>
      <description>0. 导语 这篇文章用来记录编程中遇到的数学操作的实现 1. 求两数的最大公因数 辗转相除法 1 2 3 4 5 6 7 8 9 func gcd(a, b int) int { tmp := a for tmp != 0 { // 例如 a=9, b=6 =&amp;gt; a=6, b=3</description>
    </item>
    
    <item>
      <title>形形色色的树——线段树</title>
      <link>https://azd1997.github.io/post/algo/tree-segmenttree/</link>
      <pubDate>Wed, 11 Mar 2020 18:20:07 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/tree-segmenttree/</guid>
      <description>0. 导引 对于一个数组区间$arr$，如果要频繁获取其某个子区间的最大值，需要怎么做？ 每次求子区间最大值都对该子区间做一次遍历？ 维护$O(1)$</description>
    </item>
    
    <item>
      <title>动态规划问题集锦</title>
      <link>https://azd1997.github.io/post/algo/dp-problems/</link>
      <pubDate>Mon, 09 Mar 2020 11:41:25 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dp-problems/</guid>
      <description>0. 动态规划简介 1. 股票问题 LeetCode上股票问题共有6道： 121. 买卖股票的最佳时机 122. 买卖股票的最佳时机II 123. 买卖股票的最佳时机III 188. 买卖股票</description>
    </item>
    
    <item>
      <title>树问题集锦</title>
      <link>https://azd1997.github.io/post/algo/tree-problems/</link>
      <pubDate>Sun, 08 Mar 2020 18:08:11 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/tree-problems/</guid>
      <description>0. 树的遍历框架 通常与树相关的问题都是二叉树相关的问题。 二叉树的遍历方式有前序遍历，中序遍历，后序遍历。这三种遍历都属于深度优先遍历。 还有一种</description>
    </item>
    
    <item>
      <title>链表相关题目集锦</title>
      <link>https://azd1997.github.io/post/algo/linkedlist-problems/</link>
      <pubDate>Sun, 08 Mar 2020 17:40:37 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/linkedlist-problems/</guid>
      <description>0. 链表问题集锦 在进行链表题目的训练之前，先给出链表结点的定义与链表的遍历框架。 链表结点的定义 1 2 3 4 5 6 7 8 9 10 11 12 13 // 单链表结点 type Node struct { Val</description>
    </item>
    
    <item>
      <title>链表常见操作整理</title>
      <link>https://azd1997.github.io/post/algo/linkedlist/</link>
      <pubDate>Fri, 28 Feb 2020 09:00:07 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/linkedlist/</guid>
      <description></description>
    </item>
    
    <item>
      <title>二分查找与二叉搜索树</title>
      <link>https://azd1997.github.io/post/algo/search/</link>
      <pubDate>Fri, 28 Feb 2020 08:56:41 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/search/</guid>
      <description>0. 说明 结点： 在数据结构中的结点的正确表示是结点而非节点。以下懒得修正 1. 二分查找 1.1 普通二分查找 一般来讲，二分查找要求序列有序。下面是一个示例：</description>
    </item>
    
    <item>
      <title>剑指OFFER——面试流程</title>
      <link>https://azd1997.github.io/post/algo/jzof01/</link>
      <pubDate>Wed, 26 Feb 2020 05:18:39 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/jzof01/</guid>
      <description>0. 前言 本篇总结《剑指OFFER》面试相关注意事项 1. 面试的三种形式 简历筛选 -&amp;gt; 电话面试 -&amp;gt; (远程桌面面试) -&amp;gt; 现场面试 1.1 电话面试 面试官可能&amp;quot</description>
    </item>
    
    <item>
      <title>LeetCode——计算器系列</title>
      <link>https://azd1997.github.io/post/algo/lt-calculator/</link>
      <pubDate>Mon, 24 Feb 2020 08:40:11 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt-calculator/</guid>
      <description>0. 导语 计算器作为栈的经典应用，本文就力扣平台上与计算器有关的以下题目进行总结: 150.逆波兰表达式求值 227.基本计算器II（与面试题16.</description>
    </item>
    
    <item>
      <title>排序算法整理与实现</title>
      <link>https://azd1997.github.io/post/algo/sort/</link>
      <pubDate>Sun, 23 Feb 2020 19:01:46 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/sort/</guid>
      <description>0. 排序 0.1 度量指标 评价一种排序算法，主要看以下几种因素： 时间复杂度：分最好、最坏、平均时间复杂度(当然还有个摊还时间复杂度) 空间复杂度: O(1</description>
    </item>
    
    <item>
      <title>Leetcode155——最小栈</title>
      <link>https://azd1997.github.io/post/algo/lt155/</link>
      <pubDate>Tue, 12 Nov 2019 21:56:56 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt155/</guid>
      <description>思路与实现 基于数组构建栈，min变量记录最小值。pop操作有可能需要遍历更新min，其他情况都O(1), 击败90+% 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>Leetcode752——打开转盘锁</title>
      <link>https://azd1997.github.io/post/algo/lt752/</link>
      <pubDate>Tue, 12 Nov 2019 20:43:58 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt752/</guid>
      <description>题意 打开转盘锁 你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &amp;lsquo;0&amp;rsquo;, &amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;rsquo;, &amp;lsquo;3&amp;rsquo;, &amp;lsquo;4&amp;rsquo;, &amp;lsquo;5&amp;rsquo;, &amp;lsquo;6&amp;rsquo;, &amp;lsquo;7&amp;rsquo;, &amp;lsquo;8&amp;rsquo;, &amp;lsquo;9&amp;rsquo; 。每个拨轮可以自由旋转：例如把 &amp;lsquo;9&amp;rsquo; 变为 &amp;lsquo</description>
    </item>
    
    <item>
      <title>Leetcode200——岛屿数量</title>
      <link>https://azd1997.github.io/post/algo/lt200/</link>
      <pubDate>Tue, 12 Nov 2019 02:40:52 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt200/</guid>
      <description>题意 岛的数量 给定一个由 &amp;lsquo;1&amp;rsquo;（陆地）和 &amp;lsquo;0&amp;rsquo;（水）组成的的二维网格，计算岛屿的数量。一个岛被</description>
    </item>
    
    <item>
      <title>Leetcode242——有效的字母异位词</title>
      <link>https://azd1997.github.io/post/algo/lt242/</link>
      <pubDate>Mon, 11 Nov 2019 03:19:22 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt242/</guid>
      <description>题意 有效的字母异位词 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。 示例 1: 输入: s = &amp;quot;anagram&amp;quot;, t = &amp;quot;nagaram&amp;quot; 输出: true 示例 2: 输入: s = &amp;quot;rat&amp;quot;, t = &amp;quot;car&amp;quot;</description>
    </item>
    
    <item>
      <title>Leetcode42——接雨水</title>
      <link>https://azd1997.github.io/post/algo/lt42/</link>
      <pubDate>Sun, 10 Nov 2019 22:11:41 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt42/</guid>
      <description>题意 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下</description>
    </item>
    
    <item>
      <title>Leetcode70——爬楼梯</title>
      <link>https://azd1997.github.io/post/algo/lt70/</link>
      <pubDate>Sat, 09 Nov 2019 22:47:11 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt70/</guid>
      <description>题意 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。 示例 1</description>
    </item>
    
    <item>
      <title>Leetcode11——盛最多水的容器</title>
      <link>https://azd1997.github.io/post/algo/lt11/</link>
      <pubDate>Sat, 09 Nov 2019 20:54:15 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt11/</guid>
      <description>题意 给定 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i,</description>
    </item>
    
    <item>
      <title>Leetcode283——移动零</title>
      <link>https://azd1997.github.io/post/algo/lt283/</link>
      <pubDate>Sat, 09 Nov 2019 09:08:07 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt283/</guid>
      <description>题意 移动0 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 输入: [0,1,0,3,12] 输出: [1,3,12,0,0] 说明: 必须在原数组上</description>
    </item>
    
    <item>
      <title>Leetcode146——LRU缓存机制</title>
      <link>https://azd1997.github.io/post/algo/lt146/</link>
      <pubDate>Sat, 09 Nov 2019 07:30:55 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt146/</guid>
      <description>题意 运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。 获取数据 get(key) - 如果密钥 (key) 存在</description>
    </item>
    
    <item>
      <title>Leetcode641——设计循环双端队列</title>
      <link>https://azd1997.github.io/post/algo/lt641/</link>
      <pubDate>Sat, 09 Nov 2019 01:43:22 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt641/</guid>
      <description>题意 设计实现双端队列。 你的实现需要支持以下操作： MyCircularDeque(k)：构造函数,双端队列的大小为k。 insertFront(</description>
    </item>
    
    <item>
      <title>Leetcode21——合并两个有序链表</title>
      <link>https://azd1997.github.io/post/algo/lt21/</link>
      <pubDate>Fri, 08 Nov 2019 08:33:08 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt21/</guid>
      <description>解法二超越100%golang提交 题意 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例： 输入</description>
    </item>
    
    <item>
      <title>Leetcode88——合并两个有序数组</title>
      <link>https://azd1997.github.io/post/algo/lt88/</link>
      <pubDate>Fri, 08 Nov 2019 01:59:13 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt88/</guid>
      <description>题意 给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。 说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。 你可以假设 nums1 有足够</description>
    </item>
    
    <item>
      <title>Leetcode189——旋转数组</title>
      <link>https://azd1997.github.io/post/algo/lt189/</link>
      <pubDate>Wed, 06 Nov 2019 22:36:36 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt189/</guid>
      <description>1. 题意 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例 1: 输入: [1,2,3,4,5,6,7] 和 k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右旋转 1 步: [7,1,2,3,4,5,6] 向右旋转 2 步: [6,7,1,2,3,4,5] 向右</description>
    </item>
    
    <item>
      <title>Leetcode26——删除排序数组的重复项</title>
      <link>https://azd1997.github.io/post/algo/lt26/</link>
      <pubDate>Wed, 06 Nov 2019 05:20:19 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt26/</guid>
      <description>1. 题意 难度： easy 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必</description>
    </item>
    
    <item>
      <title>覃超数据结构与算法7天训练营笔记</title>
      <link>https://azd1997.github.io/post/algo/training-classroom/</link>
      <pubDate>Mon, 04 Nov 2019 20:39:10 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/training-classroom/</guid>
      <description>0. 前言 0.1 学习目标 对于算法和数据结构理解达到职业顶尖级别 一线互联网公司面试 Leetcode 300+ 积累 0.2 学习方法 参考书籍：《异类：不一样的成功启示录》 三步走： chunk it</description>
    </item>
    
    <item>
      <title>字符串匹配算法</title>
      <link>https://azd1997.github.io/post/algo/dsa33/</link>
      <pubDate>Wed, 30 Oct 2019 07:06:46 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa33/</guid>
      <description>0. 导言 1. BF算法 2. RK算法 3. BM算法 3.1 核心思想 3.2 原理 3.2.1 坏字符规则 3.2.2 好后缀规则 3.2 go语言实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
    </item>
    
    <item>
      <title>数据结构与算法（3）——链表</title>
      <link>https://azd1997.github.io/post/algo/dsa03/</link>
      <pubDate>Fri, 18 Oct 2019 03:22:06 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa03/</guid>
      <description>1. 导语 链表的一个经典应用场景是LRU缓存淘汰算法 缓存提高数据读取性能，应用广泛，常见的有CPU缓存、数据库缓存、浏览器缓存。 缓存大小有限，当</description>
    </item>
    
    <item>
      <title>数据结构与算法（2）——数组</title>
      <link>https://azd1997.github.io/post/algo/dsa02/</link>
      <pubDate>Thu, 26 Sep 2019 22:05:29 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa02/</guid>
      <description>1. 导语 为什么数组下表从0开始而非1开始？ 2. 如何实现随机访问 数组(array) 是一种线性表数据结构，用一组连续的内存空间，存储一组相同类型的数</description>
    </item>
    
    <item>
      <title>寻找最长不重复子字符串</title>
      <link>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</guid>
      <description>求取字符串中最长的含有不重复字符的子字符串的长度。 1 开始之前 先了解下Go语言字符串的处理机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func compareBytesStringRune(s string)</description>
    </item>
    
  </channel>
</rss>