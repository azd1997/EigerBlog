<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Eiger - A young gopher</title>
    <link>https://azd1997.github.io/categories/go/</link>
    <description>Recent content in go on Eiger - A young gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Nov 2019 09:33:59 +0800</lastBuildDate>
    
	<atom:link href="https://azd1997.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go语言猎奇</title>
      <link>https://azd1997.github.io/post/go/go-tips/</link>
      <pubDate>Wed, 06 Nov 2019 09:33:59 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/go-tips/</guid>
      <description>本篇博客收集遇到的各种各样奇怪的平时难注意到的Go语言使用细节，或者说”坑“。 1. 切片打散 1 2 3 4 5 6 7 8 9 10 11 12 nums := []int{0,1,2,3} // 1. 这个挺容易理解的 nums</description>
    </item>
    
    <item>
      <title>Go面试每日一题汇总</title>
      <link>https://azd1997.github.io/post/go/go-interview-questions/</link>
      <pubDate>Tue, 29 Oct 2019 09:30:35 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/go-interview-questions/</guid>
      <description>声明 本篇所收集题目来自《Golang来啦》公众号，仅作学习之用！ https://mp.weixin.qq.com/s/rEXhrAqEOg9Ja4wYomOsGw Go面试题汇总 1. defer后进先出 1 2 3 4 5 6 7 8 9 10 11 func main() { defer_call() } func defer_call() { defer</description>
    </item>
    
    <item>
      <title>pflag简介</title>
      <link>https://azd1997.github.io/post/go/03_pflagusage/</link>
      <pubDate>Wed, 16 Oct 2019 03:15:39 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/03_pflagusage/</guid>
      <description>官方文档 https://github.com/spf13/pflag/blob/master/README.md 使用 导入： 1 import flag &amp;#34;github.com/spf13/pflag&amp;#34; Pflag和官方Flag大部分用法都是相同且兼容的。唯一注意的一点是，如果直接实例化Flag结构体，那么会没有f</description>
    </item>
    
    <item>
      <title>Viper简介</title>
      <link>https://azd1997.github.io/post/go/02_viperusage/</link>
      <pubDate>Wed, 16 Oct 2019 03:14:47 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/02_viperusage/</guid>
      <description>Viper官方文档 https://github.com/spf13/viper/blob/master/README.md 将值存入Viper 设置默认值 如果没有通过配置文件、环境变量等设置值，那么将使用默认值。默认值以如下方式设置： 1 2 3 viper.SetDefault(&amp;#34;ContentDir&amp;#34;, &amp;#34;content&amp;#34;) viper.SetDefault(&amp;#34;LayoutDir&amp;#34;,</description>
    </item>
    
    <item>
      <title>Cobra简介</title>
      <link>https://azd1997.github.io/post/go/01_corbrausage/</link>
      <pubDate>Wed, 16 Oct 2019 03:11:59 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/01_corbrausage/</guid>
      <description>Cobra官方文档 https://github.com/spf13/cobra/blob/master/README.md 本文主要译自官方文档，并加以着重和个人理解。 本文假设读者已有go语言flag包、os包编写命令行程序经验 Cobra 应用结构 1 2 3</description>
    </item>
    
    <item>
      <title>Go语言学习笔记</title>
      <link>https://azd1997.github.io/post/go/go-learning-note/</link>
      <pubDate>Thu, 12 Sep 2019 05:00:45 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/go-learning-note/</guid>
      <description>Go语言学习笔记 1. 文件操作</description>
    </item>
    
    <item>
      <title>Go语言协程池</title>
      <link>https://azd1997.github.io/post/go/01_goroutinepool/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/01_goroutinepool/</guid>
      <description>1. Golang并发三件套 ​ 这里不作过多介绍：goroutine、channel、select。goroutine是go语言的协程机制，cha</description>
    </item>
    
    <item>
      <title>单元测试</title>
      <link>https://azd1997.github.io/post/go/03_testing/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/03_testing/</guid>
      <description>1.测试介绍 ​ 尽量测试，避免调试 2. 例子 ​ 这里使用一道算法题作为调试和测试的例子： ​ 求取字符串中最长的含有不重复字符的子字符串的长度。 2.1 开始之</description>
    </item>
    
    <item>
      <title>彩色日志库实现</title>
      <link>https://azd1997.github.io/post/go/01_colorlog/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/01_colorlog/</guid>
      <description>https://www.zybuluo.com/aliasliyu4/note/612147</description>
    </item>
    
    <item>
      <title>资源管理与出错处理</title>
      <link>https://azd1997.github.io/post/go/02_unifiederrorhandling/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/02_unifiederrorhandling/</guid>
      <description>Catch All The Errors! 1. 资源管理与defer调用 defer调用特点： 确保函数结束时发生 多个defer倒序执行 例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func</description>
    </item>
    
  </channel>
</rss>