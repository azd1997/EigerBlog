<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Eiger - A young gopher</title>
    <link>https://azd1997.github.io/post/</link>
    <description>Recent content in Posts on Eiger - A young gopher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Feb 2020 19:01:46 +0800</lastBuildDate>
    
	<atom:link href="https://azd1997.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>排序算法整理与实现</title>
      <link>https://azd1997.github.io/post/algo/sort/</link>
      <pubDate>Sun, 23 Feb 2020 19:01:46 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/sort/</guid>
      <description>0. 排序 注意，评价一种排序算法，主要看以下几种因素： 时间复杂度：分最好、最坏、平均时间复杂度(当然还有个摊还时间复杂度) 空间复杂度: O(1)空</description>
    </item>
    
    <item>
      <title>计算机科学速成课全40集概要</title>
      <link>https://azd1997.github.io/post/cs/ccss/</link>
      <pubDate>Tue, 07 Jan 2020 08:36:32 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/cs/ccss/</guid>
      <description>1. 计算机早期历史 2. 电子计算机 3. 布尔逻辑和逻辑门 4. 二进制 5. 算术逻辑单元</description>
    </item>
    
    <item>
      <title>MySQL安装使用全教程</title>
      <link>https://azd1997.github.io/post/linux/mysql/</link>
      <pubDate>Sun, 24 Nov 2019 21:00:38 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/linux/mysql/</guid>
      <description>1. 安装 ubuntu下安装参考： https://www.jianshu.com/p/35e7af7db96a 1.1 安装过程无设置用户密码提示 如果安装过程没有设置密码，之后怎么登录mysql并设置自己的密码呢？ 参考：htt</description>
    </item>
    
    <item>
      <title>Go项目实战——基于ETCD的分布式任务调度</title>
      <link>https://azd1997.github.io/post/go/project-scheduler/</link>
      <pubDate>Tue, 19 Nov 2019 02:58:24 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/project-scheduler/</guid>
      <description>系统架构 基础铺垫 os/exec包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // 1. 创建Command cmd := exec.Command(name string, args ...string) // 例如： cmd := exec.Command(&amp;#34;bash&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;sleep 5s;ls -l&amp;#34;) // 2.（底层通过pi</description>
    </item>
    
    <item>
      <title>Leetcode155——最小栈</title>
      <link>https://azd1997.github.io/post/algo/lt155/</link>
      <pubDate>Tue, 12 Nov 2019 21:56:56 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt155/</guid>
      <description>思路与实现 基于数组构建栈，min变量记录最小值。pop操作有可能需要遍历更新min，其他情况都O(1), 击败90+% 1 2 3 4 5 6 7 8 9 10 11 12</description>
    </item>
    
    <item>
      <title>Leetcode752——打开转盘锁</title>
      <link>https://azd1997.github.io/post/algo/lt752/</link>
      <pubDate>Tue, 12 Nov 2019 20:43:58 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt752/</guid>
      <description>题意 打开转盘锁 你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &amp;lsquo;0&amp;rsquo;, &amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;rsquo;, &amp;lsquo;3&amp;rsquo;, &amp;lsquo;4&amp;rsquo;, &amp;lsquo;5&amp;rsquo;, &amp;lsquo;6&amp;rsquo;, &amp;lsquo;7&amp;rsquo;, &amp;lsquo;8&amp;rsquo;, &amp;lsquo;9&amp;rsquo; 。每个拨轮可以自由旋转：例如把 &amp;lsquo;9&amp;rsquo; 变为 &amp;lsquo</description>
    </item>
    
    <item>
      <title>Leetcode200——岛屿数量</title>
      <link>https://azd1997.github.io/post/algo/lt200/</link>
      <pubDate>Tue, 12 Nov 2019 02:40:52 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt200/</guid>
      <description>题意 岛的数量 给定一个由 &amp;rsquo;1&amp;rsquo;（陆地）和 &amp;lsquo;0&amp;rsquo;（水）组成的的二维网格，计算岛屿的数量。一个岛被</description>
    </item>
    
    <item>
      <title>Leetcode242——有效的字母异位词</title>
      <link>https://azd1997.github.io/post/algo/lt242/</link>
      <pubDate>Mon, 11 Nov 2019 03:19:22 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt242/</guid>
      <description>题意 有效的字母异位词 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。 示例 1: 1 2 输入: s = &amp;#34;anagram&amp;#34;, t = &amp;#34;nagaram&amp;#34; 输出: true 示例 2: 1 2 输入: s =</description>
    </item>
    
    <item>
      <title>Leetcode42——接雨水</title>
      <link>https://azd1997.github.io/post/algo/lt42/</link>
      <pubDate>Sun, 10 Nov 2019 22:11:41 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt42/</guid>
      <description>题意 接雨水 给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下</description>
    </item>
    
    <item>
      <title>Leetcode70——爬楼梯</title>
      <link>https://azd1997.github.io/post/algo/lt70/</link>
      <pubDate>Sat, 09 Nov 2019 22:47:11 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt70/</guid>
      <description>题意 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。 示例 1</description>
    </item>
    
    <item>
      <title>Leetcode11——盛最多水的容器</title>
      <link>https://azd1997.github.io/post/algo/lt11/</link>
      <pubDate>Sat, 09 Nov 2019 20:54:15 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt11/</guid>
      <description>题意 给定 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i,</description>
    </item>
    
    <item>
      <title>Leetcode283——移动零</title>
      <link>https://azd1997.github.io/post/algo/lt283/</link>
      <pubDate>Sat, 09 Nov 2019 09:08:07 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt283/</guid>
      <description>题意 移动0 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 1 2 输入: [0,1,0,3,12] 输出: [1,3,12,0,0] 说明: 必须在原数</description>
    </item>
    
    <item>
      <title>Leetcode146——LRU缓存机制</title>
      <link>https://azd1997.github.io/post/algo/lt146/</link>
      <pubDate>Sat, 09 Nov 2019 07:30:55 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt146/</guid>
      <description>题意 运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。 获取数据 get(key) - 如果密钥 (key) 存在</description>
    </item>
    
    <item>
      <title>Leetcode641——设计循环双端队列</title>
      <link>https://azd1997.github.io/post/algo/lt641/</link>
      <pubDate>Sat, 09 Nov 2019 01:43:22 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt641/</guid>
      <description>题意 设计实现双端队列。 你的实现需要支持以下操作： 1 2 3 4 5 6 7 8 9 MyCircularDeque(k)：构造函数,双端队列的大小为k。 ins</description>
    </item>
    
    <item>
      <title>Leetcode21——合并两个有序链表</title>
      <link>https://azd1997.github.io/post/algo/lt21/</link>
      <pubDate>Fri, 08 Nov 2019 08:33:08 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt21/</guid>
      <description>解法二超越100%golang提交 题意 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例： 1 2</description>
    </item>
    
    <item>
      <title>Leetcode88——合并两个有序数组</title>
      <link>https://azd1997.github.io/post/algo/lt88/</link>
      <pubDate>Fri, 08 Nov 2019 01:59:13 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt88/</guid>
      <description>题意 给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。 说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。 你可以假设 nums1 有足够</description>
    </item>
    
    <item>
      <title>Leetcode189——旋转数组</title>
      <link>https://azd1997.github.io/post/algo/lt189/</link>
      <pubDate>Wed, 06 Nov 2019 22:36:36 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt189/</guid>
      <description>1. 题意 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例 1: 1 2 3 4 5 6 输入: [1,2,3,4,5,6,7] 和 k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右旋转 1 步: [7,1,2,3,4,5,6] 向右旋转</description>
    </item>
    
    <item>
      <title>Go语言猎奇</title>
      <link>https://azd1997.github.io/post/go/go-tips/</link>
      <pubDate>Wed, 06 Nov 2019 09:33:59 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/go-tips/</guid>
      <description>本篇博客收集遇到的各种各样奇怪的平时难注意到的Go语言使用细节，或者说”坑“。 1. 切片打散 1 2 3 4 5 6 7 8 9 10 11 12 nums := []int{0,1,2,3} // 1. 这个挺容易理解的 nums</description>
    </item>
    
    <item>
      <title>Leetcode26——删除排序数组的重复项</title>
      <link>https://azd1997.github.io/post/algo/lt26/</link>
      <pubDate>Wed, 06 Nov 2019 05:20:19 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/lt26/</guid>
      <description>1. 题意 难度： easy 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必</description>
    </item>
    
    <item>
      <title>覃超数据结构与算法7天训练营笔记</title>
      <link>https://azd1997.github.io/post/algo/training-classroom/</link>
      <pubDate>Mon, 04 Nov 2019 20:39:10 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/training-classroom/</guid>
      <description>0. 前言 0.1 学习目标 对于算法和数据结构理解达到职业顶尖级别 一线互联网公司面试 Leetcode 300+ 积累 0.2 学习方法 参考书籍：《异类：不一样的成功启示录》 三步走： chunk it</description>
    </item>
    
    <item>
      <title>字符串匹配算法</title>
      <link>https://azd1997.github.io/post/algo/dsa33/</link>
      <pubDate>Wed, 30 Oct 2019 07:06:46 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa33/</guid>
      <description>0. 导言 1. BF算法 2. RK算法 3. BM算法 3.1 核心思想 3.2 原理 3.2.1 坏字符规则 3.2.2 好后缀规则 3.2 go语言实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
    </item>
    
    <item>
      <title>计算机网络02——物理层</title>
      <link>https://azd1997.github.io/post/cs/cn02/</link>
      <pubDate>Wed, 30 Oct 2019 02:37:50 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/cs/cn02/</guid>
      <description></description>
    </item>
    
    <item>
      <title>计算机组成原理</title>
      <link>https://azd1997.github.io/post/cs/computer-composition-principle/</link>
      <pubDate>Wed, 30 Oct 2019 01:54:25 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/cs/computer-composition-principle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go面试每日一题汇总</title>
      <link>https://azd1997.github.io/post/go/go-interview-questions/</link>
      <pubDate>Tue, 29 Oct 2019 09:30:35 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/go-interview-questions/</guid>
      <description>声明 本篇所收集题目来自《Golang来啦》公众号，仅作学习之用！ https://mp.weixin.qq.com/s/rEXhrAqEOg9Ja4wYomOsGw Go面试题汇总 1. defer后进先出 1 2 3 4 5 6 7 8 9 10 11 func main() { defer_call() } func defer_call() { defer</description>
    </item>
    
    <item>
      <title>数据结构与算法（3）——链表</title>
      <link>https://azd1997.github.io/post/algo/dsa03/</link>
      <pubDate>Fri, 18 Oct 2019 03:22:06 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa03/</guid>
      <description>1. 导语 链表的一个经典应用场景是LRU缓存淘汰算法 缓存提高数据读取性能，应用广泛，常见的有CPU缓存、数据库缓存、浏览器缓存。 缓存大小有限，当</description>
    </item>
    
    <item>
      <title>pflag简介</title>
      <link>https://azd1997.github.io/post/go/03_pflagusage/</link>
      <pubDate>Wed, 16 Oct 2019 03:15:39 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/03_pflagusage/</guid>
      <description>官方文档 https://github.com/spf13/pflag/blob/master/README.md 使用 导入： 1 import flag &amp;#34;github.com/spf13/pflag&amp;#34; Pflag和官方Flag大部分用法都是相同且兼容的。唯一注意的一点是，如果直接实例化Flag结构体，那么会没有f</description>
    </item>
    
    <item>
      <title>Viper简介</title>
      <link>https://azd1997.github.io/post/go/02_viperusage/</link>
      <pubDate>Wed, 16 Oct 2019 03:14:47 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/02_viperusage/</guid>
      <description>Viper官方文档 https://github.com/spf13/viper/blob/master/README.md 将值存入Viper 设置默认值 如果没有通过配置文件、环境变量等设置值，那么将使用默认值。默认值以如下方式设置： 1 2 3 viper.SetDefault(&amp;#34;ContentDir&amp;#34;, &amp;#34;content&amp;#34;) viper.SetDefault(&amp;#34;LayoutDir&amp;#34;,</description>
    </item>
    
    <item>
      <title>Cobra简介</title>
      <link>https://azd1997.github.io/post/go/01_corbrausage/</link>
      <pubDate>Wed, 16 Oct 2019 03:11:59 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/01_corbrausage/</guid>
      <description>Cobra官方文档 https://github.com/spf13/cobra/blob/master/README.md 本文主要译自官方文档，并加以着重和个人理解。 本文假设读者已有go语言flag包、os包编写命令行程序经验 Cobra 应用结构 1 2 3</description>
    </item>
    
    <item>
      <title>计算机网络01——体系结构</title>
      <link>https://azd1997.github.io/post/cs/cn01/</link>
      <pubDate>Mon, 30 Sep 2019 04:52:16 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/cs/cn01/</guid>
      <description>知识结构图 1. 基础概念 1.1 概念 利用通信设备和线路将地理位置不同的、功能独立的多个计算机系统互联，以功能完善的网络软件实现网络中资源共享和信息传递</description>
    </item>
    
    <item>
      <title>实现一个简单的HTTP服务器</title>
      <link>https://azd1997.github.io/post/cs/simplehttpserver/</link>
      <pubDate>Sat, 28 Sep 2019 03:16:29 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/cs/simplehttpserver/</guid>
      <description>1. 构建TCP服务器 1.1. 包装TCPServer类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # simpleHttpServer/server/socket_server.py import</description>
    </item>
    
    <item>
      <title>数据结构与算法（2）——数组</title>
      <link>https://azd1997.github.io/post/algo/dsa02/</link>
      <pubDate>Thu, 26 Sep 2019 22:05:29 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/dsa02/</guid>
      <description>1. 导语 为什么数组下表从0开始而非1开始？ 2. 如何实现随机访问 数组(array) 是一种线性表数据结构，用一组连续的内存空间，存储一组相同类型的数</description>
    </item>
    
    <item>
      <title>Go语言学习笔记</title>
      <link>https://azd1997.github.io/post/go/go-learning-note/</link>
      <pubDate>Thu, 12 Sep 2019 05:00:45 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/go-learning-note/</guid>
      <description>Go语言学习笔记 1. 文件操作</description>
    </item>
    
    <item>
      <title>JavaSE核心编程笔记</title>
      <link>https://azd1997.github.io/post/java/javase/</link>
      <pubDate>Thu, 05 Sep 2019 02:55:16 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/java/javase/</guid>
      <description>JavaSE核心编程笔记</description>
    </item>
    
    <item>
      <title>计算机科学中一些常用术语</title>
      <link>https://azd1997.github.io/post/cs/concepts/</link>
      <pubDate>Thu, 22 Aug 2019 11:00:49 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/cs/concepts/</guid>
      <description>计算机科学中一些常用术语 1. 原语 原语操作 原子操作 原语 内核或微核提供核外调用的过程或函数称为原语(primitive)。 原语是一段用机器指令编写</description>
    </item>
    
    <item>
      <title>edgeX安装使用全系列</title>
      <link>https://azd1997.github.io/post/iot/edgex/</link>
      <pubDate>Wed, 21 Aug 2019 01:54:34 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/iot/edgex/</guid>
      <description>edgeX安装使用全系列 1. 开发者篇 1.1 介绍 EdgeX Foundry是一组为边缘网关平台提供的微服务集合，还包含了一系列的SDK。主要的SDK编写语言为</description>
    </item>
    
    <item>
      <title>Makefile学习全系列</title>
      <link>https://azd1997.github.io/post/linux/makefile/</link>
      <pubDate>Sat, 17 Aug 2019 04:45:58 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/linux/makefile/</guid>
      <description>Makefile学习全系列</description>
    </item>
    
    <item>
      <title>git学习全系列</title>
      <link>https://azd1997.github.io/post/linux/git/</link>
      <pubDate>Sat, 17 Aug 2019 04:44:28 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/linux/git/</guid>
      <description>git学习全系列 1. 修改commit消息 https://www.cnblogs.com/revel171226/p/9208589.html 2. Pull&amp;amp;Request https://blog.csdn.net/qq_33429968/article/details/62219783 3. 合并多条commit消息 https://blog.csdn.net/u013276277/article/details/82470177 4. 删除仓库下所有文件但不删除仓库 https://www.cnblogs.com/Ghost4C-QH/p/8777744.html 5. 与远程仓库建立连接 5.1 建立关联 1</description>
    </item>
    
    <item>
      <title>docker学习全系列</title>
      <link>https://azd1997.github.io/post/linux/docker/</link>
      <pubDate>Sat, 17 Aug 2019 04:42:16 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/linux/docker/</guid>
      <description>docker学习全系列 参考： 阮一峰博客: http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html http://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html docker-compose安装 从https://github.com/docker/compo</description>
    </item>
    
    <item>
      <title>mainflux源码阅读全系列</title>
      <link>https://azd1997.github.io/post/iot/mainfluxcodereading/</link>
      <pubDate>Sat, 17 Aug 2019 03:32:15 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/iot/mainfluxcodereading/</guid>
      <description>mainflux源码阅读 mongodb-writer</description>
    </item>
    
    <item>
      <title>IotHub物联网平台搭建：从0到1</title>
      <link>https://azd1997.github.io/post/iot/iothub/</link>
      <pubDate>Sat, 17 Aug 2019 02:55:10 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/iot/iothub/</guid>
      <description>Iothub物联网平台搭建：从0到1 1. 项目介绍 2. 准备工作台 本节安装开发物联网平台用到的组件，并将开发环境搭建起来。 2.1 安装组件 在安装组件前建议</description>
    </item>
    
    <item>
      <title>安装mainflux全系列</title>
      <link>https://azd1997.github.io/post/iot/installmainflux/</link>
      <pubDate>Sat, 17 Aug 2019 02:47:50 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/iot/installmainflux/</guid>
      <description>安装mainflux 安装mainflux 1.环境准备 2.protoc安装 3. GNU MAKE安装 4. mainflux编译 4.1 获取mainflux源码 4.2. 编</description>
    </item>
    
    <item>
      <title>安装Ubuntu及其他相关使用教程</title>
      <link>https://azd1997.github.io/post/linux/installubuntu/</link>
      <pubDate>Sat, 17 Aug 2019 02:04:01 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/linux/installubuntu/</guid>
      <description>通过U盘安装Ubuntu 1. 安装 准备好ubuntu镜像文件、rufus(用于制作启动盘，也可以选择别的类似的工具，如UltraISO)、空U盘</description>
    </item>
    
    <item>
      <title>Go语言协程池</title>
      <link>https://azd1997.github.io/post/go/01_goroutinepool/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/01_goroutinepool/</guid>
      <description>1. Golang并发三件套 ​ 这里不作过多介绍：goroutine、channel、select。goroutine是go语言的协程机制，cha</description>
    </item>
    
    <item>
      <title>Iro——树莓派安装魔镜、语音助手、智能家居全系列</title>
      <link>https://azd1997.github.io/post/linux/iro-raspi/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/linux/iro-raspi/</guid>
      <description>Iro——树莓派安装魔镜、语音助手、智能家居全系列 1. 树莓派安装系统及SSH连接 1.1 安装系统 ​进入树莓派官网下载树莓派带桌面版本系统镜像，使用W</description>
    </item>
    
    <item>
      <title>Spring Boot实战01——创建Spring Boot应用</title>
      <link>https://azd1997.github.io/post/java/springboot/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/java/springboot/</guid>
      <description>创建Spring Boot应用 1. 安装IdeaU ​ 官网下载即可，学生等可以申请免费使用。 2. 创建Spring Boot应用 如果报错： 解决办法：fil</description>
    </item>
    
    <item>
      <title>单元测试</title>
      <link>https://azd1997.github.io/post/go/03_testing/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/03_testing/</guid>
      <description>1.测试介绍 ​ 尽量测试，避免调试 2. 例子 ​ 这里使用一道算法题作为调试和测试的例子： ​ 求取字符串中最长的含有不重复字符的子字符串的长度。 2.1 开始之</description>
    </item>
    
    <item>
      <title>寻找最长不重复子字符串</title>
      <link>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/algo/01_longestnonrepeatsubstring/</guid>
      <description>求取字符串中最长的含有不重复字符的子字符串的长度。 1 开始之前 先了解下Go语言字符串的处理机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func compareBytesStringRune(s string)</description>
    </item>
    
    <item>
      <title>彩色日志库实现</title>
      <link>https://azd1997.github.io/post/go/01_colorlog/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/01_colorlog/</guid>
      <description>https://www.zybuluo.com/aliasliyu4/note/612147</description>
    </item>
    
    <item>
      <title>资源管理与出错处理</title>
      <link>https://azd1997.github.io/post/go/02_unifiederrorhandling/</link>
      <pubDate>Tue, 23 Jul 2019 10:37:14 +0800</pubDate>
      
      <guid>https://azd1997.github.io/post/go/02_unifiederrorhandling/</guid>
      <description>Catch All The Errors! 1. 资源管理与defer调用 defer调用特点： 确保函数结束时发生 多个defer倒序执行 例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func</description>
    </item>
    
  </channel>
</rss>